#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet main "main function"
pub fn main() {
	$1
}
endsnippet

snippet let "let variable declaration" b
let ${1:name}${2:: ${3:type}} = ${4};
endsnippet

snippet letm "let mut variable declaration" b
let mut ${1:name}${2:: ${3:type}} = ${4};
endsnippet

snippet fn "A function, optionally with arguments and return type."
fn ${1:function_name}(${2})${3/..*/ -> /}${3} {
	${VISUAL}${0}
}
endsnippet

snippet pfn "A public function, optionally with arguments and return type."
pub fn ${1:function_name}(${2})${3/..*/ -> /}${3} {
	${VISUAL}${0}
}
endsnippet

snippet pmem "A public function, optionally with arguments and return type."
pub fn ${1:function_name}(${2}self${3/..*/, /}${3})${4/..*/ -> /}${4} {
	${VISUAL}${0}
}
endsnippet

snippet arg "Function Arguments" i
${1:a}: ${2:T}${3:, arg}
endsnippet

snippet || "Closure, anonymous function (inline)" i
${1:move }|${2}| { $3 }
endsnippet

snippet |} "Closure, anonymous function (block)" i
${1:move }|${2}| {
	$3
}
endsnippet

snippet pri "print!(..)" b
print!("${1}"${2/..*/, /}${2});
endsnippet

snippet pln "println!(..)" b
println!("${1}"${2/..*/, /}${2});
endsnippet

snippet fmt "format!(..)"
format!("${1}"${2/..*/, /}${2});
endsnippet

snippet macro "macro_rules!" b
macro_rules! ${1:name} (
	(${2:matcher}) => (
		${3}
	)
)
endsnippet

snippet mod "A module" b
mod ${1:`!p snip.rv = snip.basename.lower() or "name"`} {
	${VISUAL}${0}
}
endsnippet

snippet for "for .. in .." b
for ${1:i} in ${2} {
	${VISUAL}${0}
}
endsnippet

snippet todo "A Todo comment"
// [TODO]: ${1:Description} - `!v strftime("%Y-%m-%d %I:%M%P")`
endsnippet

snippet if "if statement" b
if ${1} {
	$2
}
endsnippet

snippet const "constant variable"
const ${1:var}: ${2:i32} = ${3:0};
endsnippet

snippet match "match statmenet"
match $1 {
	$2
}
endsnippet

############################################################################
#					Test things
############################################################################

snippet testmod "A test module"
#[cfg(test)]
mod ${1:tests} {
	${2}
}
endsnippet
snippet aseq "assert_eq!"
assert_eq!(${1:lhs}, ${2:rhs});
endsnippet

snippet test "A test function"
#[test]
fn ${1:test_name}() {
	${2}
}
endsnippet

############################################################################
#					Structs
############################################################################

snippet struct "Struct" b
struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}${0}
}
endsnippet

snippet pstruct "Struct" b
pub struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	${VISUAL}${0}
}
endsnippet

# TODO: fancy dynamic field mirroring like Python slotclass
snippet structn "Struct with new constructor." b
pub struct ${1:`!p snip.rv = snip.basename.title() or "Name"`} {
	fd${0}
}

impl $1 {
	pub fn new(${2}) -> $1
	{
		$1 { ${3} };
	}
}
endsnippet

snippet fd "Struct field definition" w
${1:name}: ${2:Type},
endsnippet

snippet impl "Struct/Trait implementation" b
impl ${2:type}${2/..*/ for /}${1} {
	${0}
}
endsnippet



snippet new "Constructor function"
pub fn new(${2}) -> ${1:Name} {
	$1 {
		${3}
	}
}
endsnippet

snippet trait "Trait defenition"
trait ${1:Name} {
	${0}
}
endsnippet

snippet tfn "Trait function declaration"
fn ${1:function_name}(${2}self, ${3})${4/..*/ -> /}${4}
endsnippet


snippet ecr "External crate"
extern crate $1;
endsnippet

############################################################################
#					Setters and getters
############################################################################
snippet mset
pub fn set_`!p
if t[2] != '':
	snip.rv = (''.join(s[0].lower() + s[1:] for s in t[2].split(' ')));
else:
	snip.rv = ''`(&mut self, ${2:var}: ${3}) {
	self.$2 = $2;
}
endsnippet
snippet mget
pub fn get_`!p
if t[2] != '':
	snip.rv = (''.join(s[0].lower() + s[1:] for s in t[2].split(' ')));
else:
	snip.rv = ''`(&self) -> ${1:f32} {
	return self.${2};
}
endsnippet

snippet msget "getter and setter"
pub fn set_${2:var}(&mut self, $2: $3) {
	self.$2 = $2;
}

pub fn get_$2(&self) -> ${3:f32} {
	return self.$2;
}
endsnippet

############################################################################
#					SCAD things
############################################################################
snippet newscad "Template for a new  scad project" b
#[macro_use]
extern crate scad_generator;

use scad_generator::*;

pub fn main() {
    let mut sfile = ScadFile::new();

    sfile.set_detail(50);

    sfile.write_to_file(String::from("out.scad"));
}
endsnippet


############################################################################
#					Block comments
############################################################################
snippet doc "Doc-comment" b
/**
  $1
*/
endsnippet

############################################################################
#					Nalgebra things
############################################################################
snippet vec2 "na::Vector2::new(..)" i
na::Vector2::new(${1:0.}, ${2:0.})
endsnippet

# vim:ft=snippets:
